. /usr/share/doc/tmux/examples/bash_completion_tmux.sh
complete -r tmux

# Commands that can be run with no existing session.
initial_commands=( "new-session" )

_num_tmux_sessions() {
    tmux ls 2>/dev/null | wc -l
    return 0
}

_tmux_sessions() {
    local sessions=( "$(tmux ls -F '#{session_name}' 2>/dev/null)" )
    COMPREPLY=( ${COMPREPLY[@]:-} $(compgen -W "${sessions[*]}" -- $1) )
}

_num_tmux_clients() {
    tmux lsc 2>/dev/null | wc -l
    return 0
}

_tmux_clients() {
    local clients=( "$(tmux lsc -F '#{client_tty}' 2>/dev/null)" )
    COMPREPLY=( ${COMPREPLY[@]:-} $(compgen -W "${clients[*]}" -- $1) )
}

_num_tmux_windows() {
    tmux lsw 2>/dev/null | wc -l
    return 0
}

_tmux_windows() {
    local clients=( "$(tmux lsw -a -F '#{window_id}' 2>/dev/null)" )
    COMPREPLY=( ${COMPREPLY[@]:-} $(compgen -W "${clients[*]}" -- $1) )
}

_better_tmux() {
    local cur=${COMP_WORDS[COMP_CWORD]}
    local prev=${COMP_WORDS[COMP_CWORD-1]}

    # What has the user already typed?
    local cmd
    local enable_opts=()

    # What options can we suggest?
    local options

    # Figure out what our command is and what options have been enabled.
    local i skip_next
    local more_opts=1
    for ((i=1; $i<$COMP_CWORD; i++)); do
        local word=${COMP_WORDS[i]}

        if [ "${skip_next}" == "1" ]; then
            skip_next=""
        elif [ "$word" == "--" ]; then
            more_opts=""
        elif [ "$more_opts" == "1" ] && [[ "$word" == -* ]]; then
            enabled_opts+=( "$word" )
            skip_next=1
        else
            cmd="$word"
            # We don't want options to tmux, we want options to the command.
            enabled_opts=()
            more_opts=1
        fi
    done

    # There is no command yet.
    if [ -z "$cmd" ]; then
        if ! tmux ls &>/dev/null; then
            # There are no existing sessions.
            COMPREPLY=( $(compgen -W "${initial_commands[*]}" -- $cur) )
        else
            # Let the default tmux completer suggest commands.
            _tmux "$@"
        fi
        return 0
    fi

    case "$cmd" in
        attach-session|a*)
            case "$prev" in
                -t) _tmux_sessions "$cur" ;;
                *)
                    options=( -d -r )
                    [ "$(_num_tmux_sessions)" -gt "1" ] && options+=( -t )
                    ;;
            esac ;;
        detach-client|det*)
            case "$prev" in
                -s) _tmux_sessions "$cur" ;;
                -t) _tmux_clients "$cur" ;;
                *)
                    options=( -P -a -s )
                    [ "$(_num_tmux_clients)" -gt "1" ] && options+=( -t )
                    ;;
            esac ;;
    esac

    if [ "${#options[@]}" -gt "0" ]; then
        # Remove options that have already been enabled.
        local opt
        for opt in "${enabled_opts[@]}"; do
            remove_first "$opt" options
        done

        COMPREPLY=( ${COMPREPLY[@]:-} $(compgen -W "${options[*]}" -- $cur) )
    fi
}

complete -F _better_tmux tmux
