. /usr/share/doc/tmux/examples/bash_completion_tmux.sh
complete -r tmux

# $1: $cur
_escape_cur() {
    printf "%q" "$1"
}

# $1: suggestion to escape.
_escape_suggestion() {
    local escaped=$(_escape_cur "$1")
    # Double up each backslash for completion.
    escaped="${escaped//\\/\\\\}"
    # Add an extra backslash for dollar signs.
    # Otherwise, the variable will be expanded.
    escaped="${escaped//\$/\\\$}"
    echo "$escaped"
}

# $1: $cur
# $2: Prefix (#{client_/#{session_)
# $3: Suffix (})
# $4+: infixes
#
# This function handles escaping each suggestion and $cur.
_format_suggestions() {
    local suggestions=()
    local infix
    local suggestion
    for infix in "${@:4}"; do
        suggestion="${2}${infix}${3}"
        suggestion=$(_escape_suggestion "$suggestion")
        suggestions+=( "$suggestion" )
    done

    # Escape cur for compgen.
    local cur=$(_escape_cur "$1")

    IFS=$'\n'
    COMPREPLY=( ${COMPREPLY[@]:-} $(compgen -W "${suggestions[*]}" -- $cur) )
    unset IFS
}

_num_tmux_sessions() {
    tmux ls 2>/dev/null | wc -l
    return 0
}

_tmux_sessions() {
    IFS=$'\n'
    local sessions=( $(tmux ls -F '#{session_name}' 2>/dev/null) )
    unset IFS
    _format_suggestions "$1" "" "" "${sessions[@]}"
}

_num_tmux_clients() {
    tmux lsc 2>/dev/null | wc -l
    return 0
}

_tmux_clients() {
    IFS=$'\n'
    local clients=( $(tmux lsc -F '#{client_tty}' 2>/dev/null) )
    unset IFS
    _format_suggestions "$1" "" "" "${clients[@]}"
}

_num_tmux_windows() {
    tmux lsw 2>/dev/null | wc -l
    return 0
}

_tmux_windows() {
    IFS=$'\n'
    local windows=( $(tmux lsw -a -F '#{window_name}' 2>/dev/null) )
    unset IFS
    _format_suggestions "$1" "" "" "${windows[@]}"
}

_tmux_client_format() {
    local format_names=( "activity" "activity_string" "created"\
        "created_string" "cwd" "height" "last_session" "prefix"\
        "readonly" "session" "termname" "tty" "utf8" "width" )
    _format_suggestions "$1" "#{client_" "}" "${format_names[@]}"
}

_tmux_session_format() {
    local format_names=( "attached" "created" "created_string" "group"\
        "grouped" "height" "id" "name" "width" "windows" )
    _format_suggestions "$1" "#{session_" "}" "${format_names[@]}"
}

_tmux_window_format() {
    local format_names=( "active" "find_matches" "flags" "height" "id"\
        "index" "layout" "name" "panes" "width" "wrap_flag" )
    _format_suggestions "$1" "#{window_" "}" "${format_names[@]}"
}

# Creates an extglob which must match $1, but additionally any letters found in
# sequence from $2.
_prefix() {
    local glob=$1
    local closing_parens=""

    local i
    for ((i=0; $i < ${#2}; i++)); do
        glob+="?(${2:$i:1}"
        closing_parens+=")"
    done

    echo ${glob}${closing_parens}
}

_better_tmux() {
    local cur=${COMP_WORDS[COMP_CWORD]}
    local prev=${COMP_WORDS[COMP_CWORD-1]}

    # What has the user already typed?
    local cmd
    local enabled_options=()

    # What options can we suggest?
    declare -A options

    # Figure out what our command is.
    local i
    # Start at i=1 so we can skip tmux.
    for ((i=1; $i<$COMP_CWORD; i++)); do
        local word=${COMP_WORDS[i]}

        if [ "$word" == "-c" ]\
            || [ "$word" == "-f" ]\
            || [ "$word" == "-L" ]\
            || [ "$word" == "-S" ]; then
            # These tmux options take a parameter. Skip the parameter.
            ((i++))
        elif [[ "$word" == -* ]]; then
            :
            # Skip this option, we don't care.
        else
            cmd="$word"
            break
        fi
    done

    # Figure out what options have already been enabled.
    for ((; $i<$COMP_CWORD; i++)); do
        local word=${COMP_WORDS[i]}

        if [[ "$word" == -* ]]; then
            enabled_options+=( "$word" )
        fi
    done

    # There is no command yet.
    if [ -z "$cmd" ]; then
        if tmux has-session; then
            # Let the default tmux completer suggest commands.
            _tmux "$@"
        else
            # There are no existing sessions.

            # Commands that can be run with no existing session.
            local initial_commands=( "start-server" "new-session" )
            COMPREPLY=( $(compgen -W "${initial_commands[*]}" -- $cur) )
        fi

        return 0
    fi

    local old_extglob=$(shopt -p extglob)
    shopt -s extglob
    case "$cmd" in
        $(_prefix a ttach-session))
            case "$prev" in
                -t) _tmux_sessions "$cur" ;;
                *)
                    options[-d]="detach other clients"
                    options[-r]="readonly"
                    [ $(_num_tmux_sessions) -gt 1 ] &&\
                        options[-t]="target session"
                    ;;
            esac ;;
        $(_prefix det ach-client))
            case "$prev" in
                -s) _tmux_sessions "$cur" ;;
                -t) _tmux_clients "$cur" ;;
                *)
                    options[-P]="SIGHUP"
                    options[-a]="kill all but -t"
                    [ $(_num_tmux_sessions) -gt 1 ] &&\
                        options[-s]="target session"
                    [ $(_num_tmux_clients) -gt 1 ] &&\
                        options[-t]="target client"
                    ;;
            esac ;;
        $(_prefix h as-session))
            case "$prev" in
                -t) _tmux_sessions "$cur" ;;
                *)
                    [ $(_num_tmux_sessions) -gt 1 ] &&\
                        options[-t]="target session"
                    ;;
            esac ;;
        $(_prefix kill-ses sion))
            case "$prev" in
                -t) _tmux_sessions "$cur" ;;
                *)
                    options[-a]="kill all but -t"
                    [ $(_num_tmux_sessions) -gt 1 ] &&\
                        options[-t]="target session"
                    ;;
            esac ;;
        killw|$(_prefix kill-w indow))
           case "$prev" in
               -t) _tmux_windows "$cur" ;;
               *)
                   options[-a]="kill all but -t"
                   [ $(_num_tmux_windows) -gt 1 ] &&\
                       options[-t]="target window"
                   ;;
           esac ;;
        lsc|$(_prefix list-cl ients))
            case "$prev" in
                -t) _tmux_sessions "$cur" ;;
                -F) _tmux_client_format "$cur" ;;
                *)
                    options[-F]="format string"
                    [ $(_num_tmux_sessions) -gt 1 ] &&\
                        options[-t]="target session"
                    ;;
            esac ;;
        ls|$(_prefix list-s essions))
            case "$prev" in
                -F) _tmux_session_format "$cur" ;;
                *) options[-F]="format string" ;;
            esac ;;
        lsw|$(_prefix list-w indows))
            case "$prev" in
                -F) _tmux_window_format "$cur" ;;
                -t) _tmux_sessions "$cur" ;;
                *)
                    options[-a]="all windows"
                    options[-F]="format string"
                    [ $(_num_tmux_sessions) -gt 1 ] &&\
                        options[-t]="target session"
                    ;;
            esac ;;
        lockc|$(_prefix lock-c lient))
            case "$prev" in
                -t) _tmux_clients "$cur" ;;
                *)
                    [ $(_num_tmux_clients) -gt 1 ] &&\
                        options[-t]="target client"
                    ;;
            esac ;;
        locks|$(_prefix lock-s ession))
            case "$prev" in
                -t) _tmux_sessions "$cur" ;;
                *)
                    [ $(_num_tmux_sessions) -gt 1 ] &&\
                        options[-t]="target session"
                    ;;
            esac ;;
        $(_prefix new -session))
            case "$prev" in
                -s)
                    if contains_in "-A" "${enabled_options[@]}"; then
                        _tmux_sessions "$cur"
                    fi
                    ;;
                -F) _tmux_session_format "$cur" ;;
                -t) _tmux_sessions "$cur" ;;
                *)
                    options[-A]="attach to -s if it exists"
                    options[-d]="create detached"
                    options[-P]="print session info"
                    options[-s]="session name"
                    if contains_in "-A" "${enabled_options[@]}"; then
                        options[-D]="detach other clients"
                    fi
                    if ! contains_in "-t" "${enabled_options[@]}"; then
                        options[-n]="window name"
                    fi
                    if contains_in "-P" "${enabled_options[@]}"; then
                        options[-F]="format string"
                    fi
                    if contains_in "-d" "${enabled_options[@]}"; then
                        options[-x]="window width"
                        options[-y]="window height"
                    fi
                    [ $(_num_tmux_sessions) -gt 1 ] &&\
                        options[-t]="group with target session"
                    ;;
            esac ;;
        $(_prefix ref resh-client))
            case "$prev" in
                -t) _tmux_clients "$cur" ;;
                *)
                    options[-S]="only update status bar"
                    [ $(_num_tmux_clients) -gt 1 ] &&\
                        options[-t]="target client"
                    ;;
            esac ;;
        $(_prefix rename-s ession))
            case "$prev" in
                -t) _tmux_sessions "$cur" ;;
                *)
                    [ $(_num_tmux_sessions) -gt 1 ] &&\
                        options[-t]="target session"
                    ;;
            esac ;;
        showmsgs|$(_prefix show-m essages))
            case "$prev" in
                -t) _tmux_clients "$cur" ;;
                *)
                    [ $(_num_tmux_clients) -gt 1 ] &&\
                        options[-t]="target client"
                    ;;
            esac ;;
        $(_prefix so urce-file)) _filedir ;;
        suspendc|$(_prefix su spend-client))
            case "$prev" in
                -t) _tmux_clients "$cur" ;;
                *)
                    [ $(_num_tmux_clients) -gt 1 ] &&\
                        options[-t]="target client"
                    ;;
            esac ;;
        switchc|$(_prefix swi tch-client))
            case "$prev" in
                -c) _tmux_clients "$cur" ;;
                -t) _tmux_sessions "$cur" ;;
                *)
                    options[-r]="readonly"
                    if contains_in "-l" "${enabled_options[@]}" ||\
                        contains_in "-n" "${enabled_options[@]}" ||\
                        contains_in "-p" "${enabled_options[@]}" ||\
                        contains_in "-t" "${enabled_options[@]}"; then
                        :
                    else
                        options[-l]="go to last session"
                        options[-n]="go to next session"
                        options[-p]="go to prev session"
                        [ $(_num_tmux_sessions) -gt 1 ] &&\
                            options[-t]="target session"
                    fi
                    [ $(_num_tmux_clients) -gt 1 ] &&\
                        options[-c]="target client"
                    ;;
            esac ;;
    esac
    eval $old_extglob

    if [ ${#options[@]} -gt 0 ]; then
        # Use compgen to narrow down the choices.
        local valid_options=( $(compgen -W "${!options[*]}" -- "$cur") )
        # Remove options that have already been enabled.
        local option
        for option in "${enabled_options[@]}"; do
            remove_first "$option" valid_options
        done

        if [ ${#valid_options[@]} -gt 0 ]; then
            if [ $COMP_TYPE -eq 63 ]; then
                # Provide option help text.
                local IFS=$'\n'
                local sorted=( $(sort <<< "${valid_options[*]}") )
                unset IFS

                echo
                for option in "${sorted[@]}"; do
                    echo "$option: ${options[$option]}"
                done
            fi

            COMPREPLY=( ${COMPREPLY[@]:-} ${valid_options[@]} )
        fi
    fi
}

complete -F _better_tmux tmux
