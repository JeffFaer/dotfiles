#!/usr/bin/env bats

bats_require_minimum_version 1.5.0

load ~/.bash_functions

@test "alias_append" {
    alias foo=bar
    alias_append foo --flag
    [[ ${BASH_ALIASES[foo]} == "bar --flag" ]]
}

@test "shlex" {
    local arr
    eval "$(dotfiles::shlex arr "'foo bar'")"
    [[ "${#arr[@]}" == 1 ]]
    [[ "${arr[0]}" == "foo bar" ]]
}

@test "shlex multiple arguments" {
    local arr
    eval "$(dotfiles::shlex arr "'foo bar'" "baz" "'baz 2'")"
    [[ "${#arr[@]}" == 3 ]]
    [[ "${arr[0]}" == "foo bar" ]]
    [[ "${arr[1]}" == "baz" ]]
    [[ "${arr[2]}" == "baz 2" ]]
}

@test "shlex resists injection attempts in arguments" {
    local arr
    eval "$(dotfiles::shlex arr "); echo foo; local arr=(")"
    [[ "${#arr[@]}" == 5 ]]
    [[ "${arr[0]}" == ");" ]]
    [[ "${arr[1]}" == "echo" ]]
    [[ "${arr[2]}" == "foo;" ]]
    [[ "${arr[3]}" == "local" ]]
    [[ "${arr[4]}" == "arr=(" ]]
}

@test "shlex resists injection attempts in array name" {
    local decl
    run --separate-stderr dotfiles::shlex "arr;echo foo;arr=" "'foo bar'"
    echo "output: $output"
    echo "stderr: $stderr"
    [[ $status != 0 ]]
    [[ "$output" == "" ]]
    # Depending bash version, the line number is 0 or 1.
    [[ "${stderr_lines[0]}" == "dotfiles::shlex: -c: line "[01]": syntax error near unexpected token \`('" ]]
}

@test "alias -x" {
    alias foo=bar
    alias -x foo
    [[ "$(alias -x foo)" == "bar" ]]
}

@test "alias -x multiple aliases" {
    alias foo=bar
    alias bar="baz --flag"
    [[ "$(alias -x foo)" == "baz --flag" ]]
}

@test "alias -x recursive" {
    alias foo="foo --flag"
    [[ "$(alias -x foo)" == "foo --flag" ]]
}

@test "alias -x with args" {
    alias foo=bar
    alias bar="baz --flag"
    [[ "$(alias -x foo --other-flag)" == "baz --flag --other-flag" ]]
}

@test "alias -x with space containing args" {
    alias foo="bar \"default arg\""
    alias bar="baz --flag \"another default arg\""
    [[ "$(alias -x foo)" == "baz --flag another\ default\ arg default\ arg" ]]
}

@test "alias -x resists injection attempts" {
    alias foo="); echo injection; local arr=(bar"
    alias -x foo
    [[ "$(alias -x foo)" == "\)\; echo injection\; local arr=\(bar" ]]
}

@test "is_function_exported" {
    func::foo() {
        :
    }
    export -f func::foo
    func::bar() {
        :
    }
    x() {
        :
    }

    run dotfiles::is_function_exported "func::foo"
    [[ $status -eq 0 ]]
    run dotfiles::is_function_exported "func::bar"
    [[ $status -ne 0 ]]
    run dotfiles::is_function_exported "x"
    [[ $status -ne 0 ]]
    run dotfiles::is_function_exported "func::unknown_function"
    [[ $status -ne 0 ]]

    export -f func::bar
    run dotfiles::is_function_exported "func::bar"
    [[ $status -eq 0 ]]

    export -f x
    run dotfiles::is_function_exported "x"
    [[ $status -eq 0 ]]
}
