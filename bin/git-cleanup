#!/usr/bin/env bash

set -euo pipefail
[[ $# -eq 0 ]] || (echo 1>&2 "This script does not take arguments." && exit 1)
set -x

git fetch --prune
git remote prune origin

branch_format='%(if)%(upstream)%(then)%(if:equals=gone)%(upstream:track,nobracket)%(then)%(refname:short)%(end)%(end)'
mapfile -t gone < <(
    git branch --format "${branch_format}" \
        | sed '/^$/d' \
        | sort -u)
[[ "${#gone[@]}" -eq 0 ]] && exit
set +x

# Select a subset of elements in the array named by $1.
# The result will overwrite $1.
select_elements() {
    [[ $# -eq 1 ]] || exit 1
    local arr_name="$1"
    local indirect_arr="$1[@]"
    local arr=( "${!indirect_arr}" )
    local num="${#arr[@]}"

    for ((i=0; i < num; i++)); do
      arr[i]="☐ ${arr[$i]}"
    done

    while true; do
        local opts=( "All of them" "${arr[@]}" )
        local end=1
        select opt in "${opts[@]}"; do
            # CTRL-D exits the select statement without executing anything in
            # this block. `end` will be set if that happens.
            end=

            if ((REPLY == 1)); then
                # All of them
                for ((i=0; i < num; i++)); do
                    if [[ "${arr[$i]}" = ☐* ]]; then
                        arr[i]="☑ ${arr[$i]#* }"
                    fi
                done
                end=1
            elif ((REPLY-2 < num)); then
                if [[ "${opt}" = ☐* ]]; then
                    arr[REPLY-2]="☑ ${opt#* }"
                else
                    arr[REPLY-2]="☐ ${opt#* }"
                fi
            fi
            break
        done

        if [[ -n "${end:-}" ]]; then
            break
        fi
    done

    local selected=()
    for e in "${arr[@]}"; do
        if [[ "${e}" = ☑* ]]; then
            selected+=( "${e#* }" )
        fi
    done

    mapfile -t "${arr_name}" < <(IFS=$'\n'; echo "${selected[*]}")
}

if [[ "${#gone[@]}" -eq 1 ]]; then
    echo
    dotfiles::user_permission "Found 1 gone branch (${gone[0]}). Would you like to clean it up? "
else
    echo
    echo "Found ${#gone[@]} gone branches. Which of them would you like to cleanup?"
    select_elements gone
fi

[[ "${#gone[@]}" -eq 0 ]] && exit 0

# We have some branches whose remote branches have gone missing.
# That generally means their PR was submitted.
#
# I have a habit of not always creating a PR per branch for personal projects.
# Let's try to find any branches between the gone branch and main that should
# also be cleaned up.

# (1) Figure out what the primary branch's name is.
if ! primary_branch="$(git primarybranch)"; then
    echo 1>&2 "Couldn't determine primary branch"
    exit 1
fi

# (2) Find all commits between the gone branches and the primary branch.
mapfile -t commits < <(
    git log --format="format:%h" "${gone[@]}" "^${primary_branch}")

# (3) Find out if any of those commits are current branch heads.
if [[ "${#commits[@]}" -gt 0 ]]; then
    cmd=( git branch --list --format="%(refname:short)" )
    for c in "${commits[@]}"; do
        cmd+=(--points-at "${c}")
    done
    # (3.5) Remove the gone branches from these extra branches we're discovering.
    mapfile -t extra_branches < <(
        comm -13 \
            <(IFS=$'\n'; echo "${gone[*]}") \
            <("${cmd[@]}" | sort -u))
else
    extra_branches=()
fi

if [[ "${#extra_branches[@]}" -eq 1 ]]; then
    echo
    if ! dotfiles::user_permission "Found 1 additional branches on the gone branches (${extra_branches[0]}). Would you like to clean it up? "; then
        extra_branches=()
    fi
elif [[ "${#extra_branches[@]}" -gt 1 ]]; then
    echo
    echo "Found ${#extra_branches[@]} additional branches on the gone branches. Which of them would you like to cleanup?"
    select_elements extra_branches
fi

# (4) Switch to a different branch if we're on one that's about to be deleted.
if grep -q \
    -F "$(git branch --show-current)" \
    <(IFS=$'\n'; echo "${gone[*]}"; echo "${extra_branches[*]}"); then

    git checkout "${primary_branch}"
fi

# (5) Remove the branches.
git branch -D "${gone[@]}" "${extra_branches[@]}"
