#!/usr/bin/env bash
# Display information about interesting commits.
#
# Interesting commits are defined as:
#   - HEAD
#   - Any local branch
#   - Any remote branch that's tracked by a local branch
#
# Environment:
#   CONTEXT - An integer number of commits you want to see before and after each
#             interesting commit's split point from the primary branch.
#             Defaults to 2.
CONTEXT="${CONTEXT:-2}"

set -euo pipefail
[[ $# -eq 0 ]] || (echo 1>&2 "This script does not take arguments." && exit 1)
[[ -v DEBUG ]] && set -x

branch_format='%(objectname:short)%(if)%(upstream)%(then)%(if:notequals=gone)%(upstream:track,nobracket)%(then)
%(upstream:short)%(end)%(end)'
mapfile -t branches < <(git branch --list --format "${branch_format}")

if ! primary_branch="$(git primarybranch)"; then
    echo 1>&2 "Couldn't determine primary branch"
    exit 1
fi

declare -A branches_by_merge_point
for b in "${branches[@]}"; do
    p="$(git merge-base "${primary_branch}" "${b}")"
    branches_by_merge_point["${p}"]+=" ${b}"
done
merge_points=( "${!branches_by_merge_point[@]}" )
# Order merge points like git log does.
mapfile -t merge_points < <(
    git log --format="format:%H" --no-walk "${merge_points[@]}")

(
dist_between() {
    git log --format="format:1" "$1" "^$2" | wc -l
}
log_format='format:%C(auto)%h%d - %ch %C(dim white)- %aE %ah%C(reset)
%s
'
p=
for ((i=0; i < ${#merge_points[@]}; i++)); do
    loggable_commits=()
    # Represents the commit that ensures we include enough pre-merge point
    # context in the git log output.
    pre_context_cutoff=''
    # A ^commit that cuts off git log just after we've printed enough post-merge
    # point context in the git log output. Or empty if there are fewer than
    # ${CONTEXT} commits remaining before root.
    post_context_cutoff=''

    prev_p="${p:-}"
    while true; do
        p="${merge_points[$i]}"

        if [[ -n "${prev_p}" ]]; then
            # We want to show at least ${CONTEXT} commits before the current
            # merge point, which we implement as commit~N where
            # N = $(dist_between ${prev_p} ${p}) - CONTEXT + 1.
            #
            # The rub here is that git log picks the column for branches based
            # on whichever commit comes first in the ordering. So if we have a
            # commit in the interesting branch that came significantly after
            # these contextual primary branch commits, the column ordering will
            # be backwards.
            #
            # So instead we find the first commit that was created before any of
            # the interesting commits and use that.
            #
            # Alternatively we could implement our own graph printing logic or
            # contribute to git log that'd allow us to influence column
            # selection in an easier way, but I'd rather not. At least not right
            # now.

            # shellcheck disable=2206
            interesting_commits=( ${branches_by_merge_point["${p}"]} )
            # git log already sorts by commit date so we don't need to.
            latest_commit_date="$(
                 git log --no-walk --format="format:%ct" -n 1\
                     "${interesting_commits[@]}")"
            pre_context_cutoff="$(
                 git log --format="format:%h" \
                     --after="${latest_commit_date}" \
                     "${merge_points[0]}" "^${p}" \
                     | tail -1)"
            if [[ -z "${pre_context_cutoff}" ]]; then
                # We didn't find any commit that happens after the interesting
                # commits.
                pre_cutoff_to_p=-1
            else
                pre_cutoff_to_p="$(
                    dist_between "${pre_context_cutoff}" "${p}")"
            fi
            if ((pre_cutoff_to_p <= CONTEXT)); then
                # The first commit that happens after the interesting commits
                # doesn't include enough context.
                # p_to_q is the calculation from a previous loop iteration.
                # So p is actually prev_p and q is actually p, so p_to_q is
                # prev_p_to_p for this loop.
                pre_context_cutoff="${prev_p}~$((p_to_q - CONTEXT + 1))"
                pre_context_skip=0
            else
                # We'll need to skip this many commits to only show CONTEXT
                # commits before the merge point.
                pre_context_skip=$((pre_cutoff_to_p - CONTEXT + 1))
            fi
        fi

        # shellcheck disable=2206
        loggable_commits+=( "${p}" ${branches_by_merge_point["${p}"]} )
        if ((i < ${#merge_points[@]}-1)); then
            # How many of these merge points should be combined because their
            # context overlaps?
            q="${merge_points[$i+1]}"
            p_to_q="$(dist_between "${p}" "${q}")"
            if ((p_to_q <= 2*CONTEXT)); then
                # p and q are close enough that their contexts would merge.
                ((i++)) || true
                continue
            fi
        fi
        break
    done

    num_remaining="$(git log --format="format:1" "${p}" | wc -l)"
    if ((num_remaining > CONTEXT)); then
        post_context_cutoff="^${p}~$((CONTEXT+1))"
    else
        post_context_cutoff=''
    fi

    # shellcheck disable=2086
    git --no-pager log \
        --color=always \
        --graph \
        --format="${log_format}" \
        --skip="${pre_context_skip:-0}" \
        ${pre_context_cutoff} \
        "${loggable_commits[@]}" \
        ${post_context_cutoff}
    if [[ -n "${post_context_cutoff}" ]]; then
        # Indicate that we omitted some commits.
        echo :
        echo :
    fi
done
) | "${PAGER:-less}" -RF
